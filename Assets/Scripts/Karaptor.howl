⊐ UnityEngine;
⊐ Active.Core; ⊐̥ Active.Status;
⊐ Activ.Kabuki; ⊐̥ Activ.Kabuki.VectorExt;

‒ ○ Karaptor : UTask{

    ┈ Start ⎚ ac.loco = ⌢ Locomotion();

    ⁺‒ ⑂ Step ⎚ ε(
        ap.isDayTime ? Wake() : Sleep() );

    ⑂ Wake ⎚ ε(
        ~ (ManageThreats() ∧ Hydrate() ∧ Forage()) ∧ Rest() );

    ⑂ Sleep ⎚ ε(
        (ap.safe ∨ Evade()) ∧ ac["Sleep"] % mo.RecoverQuickly() );

    // --------------------------------------------------------------

    ⑂ ManageThreats ⎚ ε(
        ap.safe ? ◇[log ∧ "Safe"]
        : ap.wounded ? Evade(2f)
        : ap.angry   ? Attack()
        : ap.annoyed ? Ward  ()
        : ◇[log ∧ "Not angry"]
    );

    ⑂ Ward ⎚ ac["Flail", ap.threat];

    ⑂ Attack ⎚ ac.Strike(ap.threat, 2f);

    ⑂ Evade(ㅅ scalar = 1f) → ac.Evade(ap.threat, scalar);

    // --------------------------------------------------------------

    ⑂ Hydrate(){
        ⤴ (!ap.thirsty ) ⮐ ◇[log ∧ "Not thirsty"];
        ⤴ (!ap.water   ) ⮐ ■[log ∧ "No water or not reachable"];
        ⮐ ε(   ac.Reach(ap.water)
              ∧ ac.Ingest(ap.water, consume: ✗)
              ∧ mo.hydration.Feed()
        )[log ∧ $"hydration: {mo.hydration.amount}"];
    }

    ⑂ Forage(){
        ⤴ (!ap.hungry ) ⮐ ◇[log ∧ "Not hungry"];
        ⤴ (!ap.food   ) ⮐ ■[log ∧ "No food or not reachable"];
        ⮐ ε(   ac.Reach(ap.food)
              ∧ ac.Ingest(ap.food, consume: ✗)
              ∧ mo.nutrition.Feed()
        )[log ∧ $"nutrition: {mo.nutrition.amount}"];
    }

    ⑂ Rest ⎚ ε(ac["Idle"] % mo.RecoverSlowly());

    // --------------------------------------------------------------

    KaraptorAp    ap → ⧼KaraptorAp⧽;
    KaraptorModel mo → ⧼KaraptorModel⧽;
    Actor         ac → ⧼Actor⧽;

}
