⊐ UnityEngine;
⊐ Active.Core; ⊐̥ Active.Status;
⊐ Activ.Kabuki; ⊐̥ Activ.Kabuki.VectorExt;

‒ ○ Karaptor : UTask{

    ┈ Start ⎚ ac.loco = ⌢ Locomotion();

    ⁺‒ ⑂ Step() → ε( ap.isDayTime
        ? Wake()[log ∧ "Waking time"]
        : Sleep()[log ∧ "Sleeping time"] );

    ⑂ Wake() → ε(
        ~ (ManageThreats() ∧ Hydrate() ∧ Forage())
        ∧ Rest()
    );

    ⑂ Sleep ⎚ ε(
        (ap.safe ∨ Evade()) ∧ ac["Sleep"] % mo.damage.Feed(-0.2f)
    );

    // --------------------------------------------------------------

    ⑂ ManageThreats() → ε(
        ap.safe ? ◇[log ∧ "Safe"]
        : mo.wounded       ? Evade(2f)
        : mo.anger > 0.66f ? Attack()
        : mo.anger > 0.33f ? Ward  ()
        : ◇[log ∧ "Not angry"]
    );

    ⑂ Ward() → ac["Flail", ap.threat];

    ⑂ Attack() → ac.Strike(ap.threat, 2f);

    ⑂ Evade(ㅅ scalar = 1f) → ac.Evade(ap.threat, scalar);

    // --------------------------------------------------------------

    ⑂ Hydrate(){
        ⤴ (!mo.thirsty) ⮐ ◇[log ∧ "Not thirsty"];
        ⤴ (!ap.water) ⮐ ■[log ∧ "No water or not reachable"];
        ⮐ ε(
            ac.Reach(ap.water)
          ∧ ac.Ingest(ap.water, consume: ✗)
          ∧ mo.hydration.Feed()
        )[log ∧ $"hydration: {mo.hydration.amount}"];
    }

    ⑂ Forage(){
        ⤴ (!mo.hungry) ⮐ ◇[log ∧ "Not hungry"];
        ⮐ ε(
            ac.Reach(ap.food)
          ∧ ac.Ingest(ap.food, consume: ✗)
          ∧ mo.nutrition.Feed()
        )[log ∧ $"nutrition: {mo.nutrition.amount}"];
    }

    ⑂ Rest() → ε(ac["Idle"] % mo.damage.Feed(-0.05f));

    // --------------------------------------------------------------

    KaraptorAp    ap → ⧼KaraptorAp⧽;
    KaraptorModel mo → ⧼KaraptorModel⧽;
    Actor         ac → ⧼Actor⧽;

}
