⊐ UnityEngine;
⊐ Active.Core; ⊐̥ Active.Status;
⊐ Activ.Kabuki; ⊐̥ Activ.Kabuki.VectorExt;

‒ ○ Karaptor : UTask{

    ⁺‒ ⑂ Step() → ε( ap.isDayTime
        ? Wake()[log ∧ "Waking time"]
        : Sleep()[log ∧ "Sleeping time"] );

    ⑂ Wake() → ε(
        ManageThreats()
        ∧ Hydrate()
        ∧ Forage()
        ∧ Rest()
    );

    ⑂ Sleep ⎚ ac["Sleep"];

    // --------------------------------------------------------------

    ⑂ ManageThreats() → ε(
        mo.damage > 0.50f ? Evade()  :
        mo.anger  > 0.66f ? Attack() :
        mo.anger  > 0.33f ? Ward  () : ◇[log ∧ "Not angry"]
    );

    ⑂ Ward() → ac["Flail", ap.threat];

    ⑂ Attack() → ac.Strike(ap.threat, 2f);

    ⑂ Evade(){
        ⤴ (ap.threat ☰ ∅) ⮐ ◇[log ∧ "No threat"];
        ⤳ (ap.threat.Dist(み) > 15f) ◇̠
        ∙ u = ap.threat.Dir(み);
        ∙ P = ap.threat˙ + u ᐧ 15f;
        ⮐ ac.Reach(P);
    }

    // --------------------------------------------------------------

    ⑂ Hydrate(){
        ⤴ (!mo.thirsty) ⮐ ◇[log ∧ "Not thirsty"];
        ⮐ ε(
            ac.Reach(ap.water)
          ∧ ac.Ingest(ap.water, consume: ✗)
          ∧ mo.hydration.Feed()
        )[log ∧ $"hydration: {mo.hydration.amount}"];
    }

    ⑂ Forage(){
        ⤴ (!mo.hungry) ⮐ ◇[log ∧ "Not hungry"];
        ⮐ ε(
            ac.Reach(ap.food)
          ∧ ac.Ingest(ap.food, consume: ✗)
          ∧ mo.nutrition.Feed()
        )[log ∧ $"nutrition: {mo.nutrition.amount}"];
    }

    ⑂ Rest() → ac["Idle"];

    // --------------------------------------------------------------

    KaraptorAp    ap → ⧼KaraptorAp⧽;
    KaraptorModel mo → ⧼KaraptorModel⧽;
    Actor         ac → ⧼Actor⧽;

}
