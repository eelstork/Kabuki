⊐ Ex = System.Exception;
⊐ UnityEngine; ⊐̥ UnityEngine.Time; ⊐̥ UnityEngine.Mathf;
⊐ Active.Core; ⊐̥ Active.Status;

⊓ Activ.Kabuki{
‒̥ ○ TransformExt{

    ‒̥ シ Dir(⦿ エ x, エ y, ㅇ planar = ✗)
        → planar ? (y˙ - x˙).X_Z()¹ : (y˙ - x˙)¹;

    ‒̥ シ Dir(⦿ エ x, メ y, ㅇ planar = ✗)
        → planar ? (y - x˙).X_Z()¹ : (y - x˙)¹;

    ‒̥ ㅅ Dist(⦿ エ x, エ y) → メ.Distance(x˙, y˙);

    ‒̥ ㅅ Radius(⦿ エ x){
        ∙ bounds = x.GetComponentInChildren<Renderer>().bounds;
        ∙ s = bounds.size;
        ⮐ (s.x + s.y + s.z) / 6 ᐧ 0.7f;
    }

    ‒̥ エ Req(⦿ エ x, ⋯ ㄹ[] hints){
        ∙ ㄸ = x.Find(hints);
        ⮐ ㄸ ≠ ∅ ? ㄸ : (╯°□°)╯ ⌢ Ex("Not found: " + hints);

    }

    ‒̥ エ Find(⦿ エ x, ⋯ ㄹ[] hints){
        ∀ (エ child ∈ x){
            ∙ name = childˮ.ToLower();  ㅇ match = ✓;
            ∀ (∙ h ∈ hints) ⤴ (!name.∋(h)){ match = false; ¦ }
            ⤴ (match) ⮐ child;
            ∙ ㄸ = child.Find(hints);
            ⤴ (ㄸ ≠ ∅) ⮐ ㄸ;
        }
        ⏂
    }

    ‒̥ ㅇ Has(⦿ エ x, エ y) → y.IsAncestor(x);

    // is y an ancestor of x?
    ‒̥ ㅇ IsAncestor(⦿ エ x, エ y){
        ⟲ (x ≠ null){
            ⤴ (x ☰ y) ㆑
            x = x.parent;
        } ⤬
    }

    ‒̥ ㅅ Look(⦿ エ x, エ y, ㅇ planar = ✓)
    → シ.Angle(x.forward, x.Dir(y, planar: planar));

    ‒̥ ⑂ MoveTo(⦿ エ x, メ y, ㅅ speed){
        ⤴ (x˙ ☰ y) ◇̠
        ㅅ d = PlanarDist(x, y);
        ㅅ δ = Mathf.Min(𝛿𝚝 ᐧ 𝝇, d);
        シ u = x.PlanarDir(y);
        ⮐ Run(x˙ += u ᐧ δ);
    }

    ‒̥ ⑂ MoveTowards(⦿ エ x, シ y, ㅅ dist, ㅅ speed)
        → x.PlanarDist(y) < dist
        ∨ Run( x˙ += x.PlanarDir(y) ᐧ 𝛿𝚝 ᐧ 𝝇 );

    ‒̥ ⑂ MoveTowards(⦿ エ x, エ y, ㅅ dist, ㅅ speed)
        → x.PlanarDist(y) < dist
        ∨ Run( x˙ += x.PlanarDir(y) ᐧ 𝛿𝚝 ᐧ 𝝇 );

    ‒̥ ㅅ PlanarDist(⦿ エ x, シ y) → (y - x˙).X_Z()❚;

    ‒̥ ㅅ PlanarDist(⦿ エ x, エ y) → PlanarDist(x, y˙);

    ‒̥ シ PlanarDir(⦿ エ x, シ y) → (y - x˙).X_Z()¹;

    ‒̥ シ PlanarDir(⦿ エ x, エ y) → PlanarDir(x, y˙);

    ‒̥ ⑂ RotateTowards(⦿ エ θ, エ ⧕, ㅅ speed, ㅅ μ = 0.1f){
        シ u = θ.⫫, v = θ.Dir(⧕, planar: ✓);
        ⮐ ( シ.Angle(u, v) < μ )  ? ◇
           : Run( θ.⫫ = メ.RotateTowards(u, v, 𝝇 ᐧ 𝛿𝚝 ᐧ ∠ʳ, 1f) );
    }

    ‒̥ ⑂ RotateTowards(⦿ エ θ, メ pos, ㅅ speed, ㅅ μ = 0.1f){
        シ u = θ.forward, dir = θ.Dir(pos, planar: ✓);
        ㅅ α = シ.Angle(u, dir);
        ⤴ (α < μ) ◇̠
        θ.forward = シ.RotateTowards(u, dir, 𝝇 ᐧ 𝛿𝚝 ᐧ ∠ʳ, 1f);
        ☡̱
    }

    ∘ ▷ Log(ㄹ arg){
        Debug.Log(arg + $" @{Time.frameCount}");
        ⌽
    }

    // --------------------------------------------------------------

    ∘ ⑂ Do(⊡ x) { ⌽ }
    ∘ ⑂ Run(⊡ x) { ☡̱ }

}}
