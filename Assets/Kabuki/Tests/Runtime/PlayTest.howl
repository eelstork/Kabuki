⊐ System; ⊐ System.Collections;
⊐ Ex = System.Exception;
⊐ System.Collections.Generic;
⊐ UnityEngine;
⊐ NUnit.Framework;
⊐ Active.Core; ⊐̥ Active.Core.status;

⊓ Kabuki.Test{
‒ ○ PlayTest{

    ロ ground, sun, cam;
    List<ロ> objects = new List<ロ>();
    ㅅ savedTimeScale = 0;

    // Assertions ---------------------------------------------------

    ◠ ┈ o (ㅇ arg) → Assert.That(arg);

    ◠ ┈ o (⊡ x, ⊡ y) → Assert.That(x, Is.EqualTo(y));

    ‒ 𝔼 Complete( ⒡<⑂> act, ㅅ timeout, ᆞ timeScale = 1 ){
        OverrideTimeScale(timeScale);
        ∙ t0 = ⒯ ;
        ⟲ ( ⒯ - t0 < timeout ) { ⤴ (act().complete) ¦ ⟆ }
        ⤴ ( ⒯ - t0 ≥ timeout )
            (╯°□°)╯ ⌢ Ex($"Timeout: {timeout}s");
        RestoreTimeScale();
    }

    ‒ 𝔼 Run( ⒡<⑂> act, ㅅ duration, ᆞ timeScale = 1 ){
        OverrideTimeScale(timeScale);
        ∙ t0 = ⒯ ;
        ⟲ ( ⒯ - t0 < duration ) {
            ∙ s = act();
            ⤴ (!s.running) (╯°□°)╯
                ⌢ Ex($"'cont' expected, {s} found @{Time.frameCount}");
            ⟆
        }
        RestoreTimeScale();
    }

    ‒ 𝔼 Fail( ⒡<⑂> act, ㅅ timeout, ᆞ timeScale = 1 ){
        OverrideTimeScale(timeScale);
        ∙ t0 = ⒯ ;
        ⟲ ( ⒯ - t0 < timeout ) { ⤴ (act().failing) ¦ ⟆ }
        ⤴ ( ⒯ - t0 ≥ timeout )
            (╯°□°)╯ ⌢ Ex($"Timeout: {timeout}s");
        RestoreTimeScale();
    }

    ‒ ロ Create(ㄹ name, メ? pos=∅){
        ∙ go = UnityEngine.Object.Instantiate(Resources.Load<ロ>(name));
        go.name = name;
        objects.Add(go);
        go˙ = pos ?? メ.zero;
        ⮐ go;
    }

    ‒ エ Ball(ㅅ size, ㄹ name = "Ball", エ parent = ∅){
        ∙ go = ロ.CreatePrimitive(PrimitiveType.Sphere);
        go.name = name;
        ∙ θ = go.transform;
        θ.localScale = メ.one * size;
        θ.SetParent(parent);
        ⤴ (parent ≠ ∅) go.SetActive(✗);
        objects.Add(go);
        ⮐ θ;
    }

    ‒ エ Box(ㅅ x, ㅅ z, ㅅ size, ㄹ name = "Box"){
        ∙ go = ロ.CreatePrimitive(PrimitiveType.Cube);
        go.name = name;
        ∙ θ = go.transform;
        θ.localScale = メ.one * size;
        θ.position = ⌢ メ(x, size/2, z);
        objects.Add(go);
        ⮐ θ;
    }

    ‒ エ CreateEmpty(ㄹ name, メ pos){
        ∙ θ = CreateEmpty(pos);
        θˮ = name;
        ⮐ θ;
    }

    ‒ エ CreateEmpty(メ pos){
        ∙ go = ⌢ ロ("Empty");
        go˙ = pos;
        objects.Add(go);
        ⮐ go.transform;
    }

    ◠ ┈ Print(⊡ arg) → UnityEngine.Debug.Log(arg);

    // --------------------------------------------------------------

    ┈ OverrideTimeScale(ㅅ x){
        savedTimeScale = Time.timeScale;
        Time.timeScale = x;
    }

    ┈ RestoreTimeScale() → Time.timeScale = savedTimeScale;

    ⍜ Setup(){
        Time.timeScale = 1;
        cam = ロ.Find("Camera");
        ⤴ (!cam){
            // Create a camera
            cam = ⌢ ロ("Camera");
            cam.《Camera》.backgroundColor = Color.white;
            cam˙ = メ.back * 2 + メ.up * 1;
            cam.⧼Camera⧽.tag = "MainCamera";
            // Create a light
            sun = ⌢ ロ("Sun");
            sun.transform.localEulerAngles = ⌢ メ(30, 30, 0);
            ∙ light = sun.《Light》;
            light.type = LightType.Directional;
            // Remove skybox
            RenderSettings.skybox = ∅;
            // Create ground
            ground = ロ.CreatePrimitive(PrimitiveType.Plane);
            ground.transform.localScale *= 12;
        }
    }

    ⍉ Teardown(){
        ∀ (∙ k ∈ objects) ロ.DestroyImmediate(k);
        objects = ⌢ 𝕃 <ロ>();
        Time.timeScale = 1;
    }

}}
